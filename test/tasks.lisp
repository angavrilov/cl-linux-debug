;;; -*- mode: Lisp; indent-tabs-mode: nil; -*-

(in-package :cl-linux-debug.test)

(defsuite* (test/tasks :in test) ())

(defparameter *scheduler* nil)

(def fixture scheduler
  (let ((*scheduler* (make-instance 'cl-linux-debug::debug-task-scheduler :name "TEST")))
    (-body-)))

(def test test/tasks/run-wait-exit ()
  (with-fixture scheduler
    (let* ((foo 0)
           (queue (make-instance 'cl-linux-debug::debug-task-wait-queue))
           (task (cl-linux-debug::make-task
                  (lambda/cc ()
                    (incf foo)
                    (cl-linux-debug::wait-on-queue queue)
                    (values 1 2)))))
      (is (= foo 0))
      (is (not (task-finished? task)))
      (cl-linux-debug::initial-schedule-task *scheduler* task)
      (is (eq (cl-linux-debug::scheduler-of task) *scheduler*))
      (is (cl-linux-debug::has-scheduled-tasks? *scheduler*))
      (cl-linux-debug::run-scheduled-tasks *scheduler*)
      (is (= foo 1))
      (is (not (task-finished? task)))
      (is (equal (cl-linux-debug::waiting-tasks-of queue) (list task)))
      (is (eq (cl-linux-debug::cur-wait-queue-of task) queue))
      (cl-linux-debug::wake-up-tasks queue)
      (is (null (cl-linux-debug::waiting-tasks-of queue)))
      (is (null (cl-linux-debug::cur-wait-queue-of task)))
      (is (cl-linux-debug::has-scheduled-tasks? *scheduler*))
      (cl-linux-debug::run-scheduled-tasks *scheduler*)
      (is (task-finished? task))
      (is (= foo 1))
      (is (equal (return-values-of task) '(1 2))))))

(def test test/tasks/run-exit-unwind ()
  (with-fixture scheduler
    (let* ((foo 0) (bar 0) (baz 0) (bazz 0)
           (task (cl-linux-debug::make-task
                  (lambda/cc ()
                    (with-exit-unwind (progn)
                      (incf foo))
                    (with-exit-unwind
                        (with-exit-unwind
                            (exit-task :a)
                          (incf bar)
                          (exit-task :b))
                      (incf baz))
                    (incf bazz)
                    (values 1 2)))))
      (cl-linux-debug::initial-schedule-task *scheduler* task)
      (cl-linux-debug::run-scheduled-tasks *scheduler*)
      (is (task-finished? task))
      (is (= foo 1))
      (is (= bar 1))
      (is (= baz 1))
      (is (= bazz 0))
      (is (equal (return-values-of task) '(:b))))))

(def test test/tasks/rw-lock ()
  (with-fixture scheduler
    (let* ((lock (make-debug-r/w-lock))
           (barrier (make-instance 'cl-linux-debug::debug-task-wait-queue))
           (task1-pos -1)
           (task1 (cl-linux-debug::make-task
                   (lambda/cc ()
                     (setf task1-pos 0)
                     (cl-linux-debug::wait-on-queue barrier)
                     (with-r/w-lock-held (lock :read)
                       (setf task1-pos 1)
                       (cl-linux-debug::wait-on-queue barrier)
                       (with-r/w-lock-held (lock :read)
                         (setf task1-pos 2)
                         (cl-linux-debug::wait-on-queue barrier)))
                     (setf task1-pos 3)
                     (cl-linux-debug::wait-on-queue barrier)
                     (setf task1-pos 4)
                     (cl-linux-debug::wait-on-queue barrier)
                     (with-r/w-lock-held (lock :read)
                       (setf task1-pos 6)
                       (cl-linux-debug::wait-on-queue barrier)))))
           (task2-pos -1)
           (task2 (cl-linux-debug::make-task
                   (lambda/cc ()
                     (setf task2-pos 0)
                     (cl-linux-debug::wait-on-queue barrier)
                     (setf task2-pos 1)
                     (cl-linux-debug::wait-on-queue barrier)
                     (with-r/w-lock-held (lock :read)
                       (with-r/w-lock-held (lock :read)
                         (setf task2-pos 2)
                         (cl-linux-debug::wait-on-queue barrier))
                       (setf task2-pos 3)
                       (cl-linux-debug::wait-on-queue barrier))
                     (setf task2-pos 4)
                     (cl-linux-debug::wait-on-queue barrier)
                     (with-r/w-lock-held (lock :read)
                       (setf task2-pos 6)
                       (cl-linux-debug::wait-on-queue barrier)))))
           (task3-pos -1)
           (task3 (cl-linux-debug::make-task
                   (lambda/cc ()
                     (setf task3-pos 0)
                     (cl-linux-debug::wait-on-queue barrier)
                     (setf task3-pos 1)
                     (cl-linux-debug::wait-on-queue barrier)
                     (with-r/w-lock-held (lock :write)
                       (with-r/w-lock-held (lock :read)
                         (setf task3-pos 4)
                         (cl-linux-debug::wait-on-queue barrier))
                       (setf task3-pos 5)
                       (cl-linux-debug::wait-on-queue barrier))
                     (setf task3-pos 6)
                     (cl-linux-debug::wait-on-queue barrier)))))
      (cl-linux-debug::initial-schedule-task *scheduler* task1)
      (cl-linux-debug::initial-schedule-task *scheduler* task2)
      (cl-linux-debug::initial-schedule-task *scheduler* task3)
      (is (= task1-pos task2-pos task3-pos -1))
      (cl-linux-debug::wake-up-tasks barrier)
      (cl-linux-debug::run-scheduled-tasks *scheduler*)
      (is (= task1-pos task2-pos task3-pos 0))
      (cl-linux-debug::wake-up-tasks barrier)
      (cl-linux-debug::run-scheduled-tasks *scheduler*)
      (is (= task1-pos task2-pos task3-pos 1))
      (is (equal (cl-linux-debug::readers-of lock) (list task1)))
      (cl-linux-debug::wake-up-tasks barrier)
      (cl-linux-debug::run-scheduled-tasks *scheduler*)
      (is (= task1-pos task2-pos 2))
      (is (= task3-pos 1))
      (is (equal (cl-linux-debug::readers-of lock) (list task2 task1)))
      (is (equal (cl-linux-debug::waiting-tasks-of
                  (cl-linux-debug::tasks-waiting-write-of lock))
                 (list task3)))
      (cl-linux-debug::wake-up-tasks barrier)
      (cl-linux-debug::run-scheduled-tasks *scheduler*)
      (is (= task1-pos task2-pos 3))
      (is (= task3-pos 1))
      (is (equal (cl-linux-debug::readers-of lock) (list task2)))
      (cl-linux-debug::wake-up-tasks barrier)
      (cl-linux-debug::run-scheduled-tasks *scheduler*)
      (cl-linux-debug::run-scheduled-tasks *scheduler*)
      (is (= task1-pos task2-pos task3-pos 4))
      (is (null (cl-linux-debug::readers-of lock)))
      (is (eq (cl-linux-debug::writer-of lock) task3))
      (cl-linux-debug::wake-up-tasks barrier)
      (cl-linux-debug::run-scheduled-tasks *scheduler*)
      (is (= task3-pos 5))
      (is (= task1-pos task2-pos 4))
      (is (null (cl-linux-debug::readers-of lock)))
      (is (= (length (cl-linux-debug::waiting-tasks-of
                      (cl-linux-debug::tasks-waiting-read-of lock)))
             2))
      (cl-linux-debug::wake-up-tasks barrier)
      (cl-linux-debug::run-scheduled-tasks *scheduler*)
      (cl-linux-debug::run-scheduled-tasks *scheduler*)
      (is (= task1-pos task2-pos task3-pos 6))
      (is (null (cl-linux-debug::writer-of lock)))
      (cl-linux-debug::wake-up-tasks barrier)
      (cl-linux-debug::run-scheduled-tasks *scheduler*)
      (is (and (task-finished? task1) (task-finished? task2) (task-finished? task3)))
      (is (null (cl-linux-debug::writer-of lock)))
      (is (null (cl-linux-debug::readers-of lock))))))
